// backbone-select2-0.1.0
// http://github.com/wbbradley/backbone-select2
// Generated by CoffeeScript 1.6.3
(function() {
  var BaseOptionView, SelectControlView, TestOptionView, _ref, _ref1, _ref2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseOptionView = (function(_super) {
    __extends(BaseOptionView, _super);

    function BaseOptionView() {
      this.render = __bind(this.render, this);
      this.tagName = __bind(this.tagName, this);
      this.initialize = __bind(this.initialize, this);
      _ref = BaseOptionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BaseOptionView.prototype.initialize = function() {
      console.log('OptionView init');
      if (!this.propertyValue) {
        throw new Error('You must specify a propertyValue on a derived class from BaseOptionView');
      }
      if (!this.propertyDisplay) {
        throw new Error('You must specify a propertyName on a derived class from BaseOptionView');
      }
      return this.listenTo(this.model, 'change', this.render);
    };

    BaseOptionView.prototype.tagName = function() {
      return 'option';
    };

    BaseOptionView.prototype.render = function() {
      this.el.setAttribute('value', _.result(this, 'propertyValue'));
      this.el.innerText = _.result(this, 'propertyDisplay');
      return this;
    };

    return BaseOptionView;

  })(Backbone.View);

  TestOptionView = (function(_super) {
    __extends(TestOptionView, _super);

    function TestOptionView() {
      this.propertyDisplay = __bind(this.propertyDisplay, this);
      this.propertyValue = __bind(this.propertyValue, this);
      _ref1 = TestOptionView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TestOptionView.prototype.propertyValue = function() {
      return this.model.cid;
    };

    TestOptionView.prototype.propertyDisplay = function() {
      return this.model.get('name') + ': ' + this.model.get('age');
    };

    return TestOptionView;

  })(BaseOptionView);

  SelectControlView = (function(_super) {
    __extends(SelectControlView, _super);

    function SelectControlView() {
      this.onChange = __bind(this.onChange, this);
      this.initialize = __bind(this.initialize, this);
      this.format = __bind(this.format, this);
      _ref2 = SelectControlView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SelectControlView.prototype.format = function(state) {
      return "" + state.name;
    };

    SelectControlView.prototype.initialize = function() {
      var _ref3,
        _this = this;
      if (!((_ref3 = this.options.selectedCollection) != null ? _ref3.model : void 0)) {
        throw new Error('SelectControlView : error : you must provide a collection to store the selected objects');
      }
      this.$select = this.$el.select2({
        multiple: true,
        id: function(item) {
          return item.id;
        },
        data: {
          results: this.collection.toJSON(),
          text: 'name'
        },
        formatResult: this.format,
        formatSelection: this.format,
        createSearchChoice: function(term) {
          var itemsWithTerm;
          itemsWithTerm = _this.collection.where({
            name: term
          });
          if ((itemsWithTerm != null ? itemsWithTerm.length : void 0) > 0) {
            return;
          }
          return {
            id: _.uniqueId('n'),
            name: term,
            age: 18
          };
        },
        placeholder: 'Choose'
      });
      this.$select.select2('data', this.options.selectedCollection.toJSON());
      this.$select.change(this.onChange);
    };

    SelectControlView.prototype.onChange = function(event) {
      var itemMatching, itemToRemove, model;
      console.log("Select change event fired: added = " + event.added + "; removed = " + event.removed);
      if (event.added) {
        itemMatching = this.options.selectedCollection.findWhere({
          id: event.added.id
        });
        if (itemMatching) {
          throw new Error('SelectControlView : error : attempt to add item to selectedCollection that already exists');
        }
        model = new this.options.selectedCollection.model(event.added);
        this.options.selectedCollection.add(model);
        model.save();
      }
      if (event.removed) {
        itemToRemove = this.options.selectedCollection.findWhere({
          id: event.removed.id
        });
        if (!itemToRemove) {
          throw new Error('SelectControlView : error : change event occurred but selectedCollection is not in sync');
        }
        this.options.selectedCollection.remove(itemToRemove);
      }
      return true;
    };

    return SelectControlView;

  })(Backbone.View);

  $(function() {
    var TestListView, datapoints, selectView, selectedDatapoints, selectionView, _ref3;
    Handlebars.registerHelper('dump', function(obj) {
      return JSON.stringify(obj).toString();
    });
    datapoints = new Backbone.Collection([
      {
        id: 1,
        name: 'Bill',
        age: 27
      }, {
        id: 2,
        name: 'Alice',
        age: 28
      }, {
        id: 3,
        name: 'John',
        age: 18
      }, {
        id: 4,
        name: 'Mary',
        age: 58
      }
    ]);
    selectedDatapoints = new Backbone.Collection([
      {
        id: 2,
        name: 'Alice',
        age: 28
      }
    ]);
    selectView = new SelectControlView({
      el: $('#sample-select')[0],
      collection: datapoints,
      item_view_class: TestOptionView,
      selectedCollection: selectedDatapoints
    });
    TestListView = (function(_super) {
      __extends(TestListView, _super);

      function TestListView() {
        _ref3 = TestListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      TestListView.prototype.tagName = 'li';

      TestListView.prototype.className = 'test-list-item';

      return TestListView;

    })(Guts.BasicModelView);
    return selectionView = new Guts.BaseCollectionView({
      el: $('#selection-section')[0],
      item_view_class: TestListView,
      collection: selectedDatapoints
    });
  });

}).call(this);
