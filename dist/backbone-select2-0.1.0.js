// backbone-select2-0.1.0
// http://github.com/wbbradley/backbone-select2
// Generated by CoffeeScript 1.6.3
(function() {
  var BaseOptionView, MultiSelectControlView, testBackboneSelect2, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseOptionView = (function(_super) {
    __extends(BaseOptionView, _super);

    function BaseOptionView() {
      this.render = __bind(this.render, this);
      this.tagName = __bind(this.tagName, this);
      this.initialize = __bind(this.initialize, this);
      _ref = BaseOptionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BaseOptionView.prototype.initialize = function() {
      console.log('OptionView init');
      if (!this.propertyValue) {
        throw new Error('You must specify a propertyValue on a derived class from BaseOptionView');
      }
      if (!this.propertyDisplay) {
        throw new Error('You must specify a propertyName on a derived class from BaseOptionView');
      }
      return this.listenTo(this.model, 'change', this.render);
    };

    BaseOptionView.prototype.tagName = function() {
      return 'option';
    };

    BaseOptionView.prototype.render = function() {
      this.el.setAttribute('value', _.result(this, 'propertyValue'));
      this.el.innerText = _.result(this, 'propertyDisplay');
      return this;
    };

    return BaseOptionView;

  })(Backbone.View);

  MultiSelectControlView = (function(_super) {
    __extends(MultiSelectControlView, _super);

    function MultiSelectControlView() {
      this.onChange = __bind(this.onChange, this);
      this.initialize = __bind(this.initialize, this);
      this.formatter = __bind(this.formatter, this);
      _ref1 = MultiSelectControlView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    MultiSelectControlView.prototype.formatter = function() {
      var displayProperty;
      if (typeof this.options.displayProperty === 'string') {
        displayProperty = this.options.displayProperty;
        return function(item) {
          return _.result(item, displayProperty);
        };
      } else {
        throw new Error('MultiSelectControlView : error : you must define the displayProperty in your model to show in the dropdown');
      }
    };

    MultiSelectControlView.prototype.initialize = function(options) {
      var _ref2, _ref3,
        _this = this;
      this.options = options;
      if (!((_ref2 = this.options) != null ? (_ref3 = _ref2.selectedCollection) != null ? _ref3.model : void 0 : void 0)) {
        throw new Error('MultiSelectControlView : error : you must provide a collection to store the selected objects');
      }
      this.$select = this.$el.select2({
        multiple: true,
        id: (function() {
          var id;
          id = _this.options.id;
          return function(item) {
            return _.result(item, id || 'id');
          };
        })(),
        data: {
          results: this.collection.toJSON(),
          text: this.options.displayProperty
        },
        formatResult: this.formatter(),
        formatSelection: this.formatter(),
        createSearchChoice: function(term) {
          var itemsWithTerm, search, searchChoice;
          search = {};
          search[_this.options.displayProperty] = term;
          itemsWithTerm = _this.collection.where(search);
          if ((itemsWithTerm != null ? itemsWithTerm.length : void 0) > 0) {
            return;
          }
          searchChoice = _.extend({}, _this.options.defaultItem, {
            id: _.uniqueId('n')
          });
          searchChoice[_this.options.displayProperty] = term;
          return searchChoice;
        },
        placeholder: this.options.placeholder
      });
      this.$select.select2('data', this.options.selectedCollection.toJSON());
      this.$select.change(this.onChange);
    };

    MultiSelectControlView.prototype.onChange = function(event) {
      var itemMatching, itemToRemove, model;
      console.log("Select change event fired: added = " + event.added + "; removed = " + event.removed);
      if (event.added) {
        itemMatching = this.options.selectedCollection.findWhere({
          id: event.added.id
        });
        if (itemMatching) {
          throw new Error('MultiSelectControlView : error : attempt to add item to selectedCollection that already exists');
        }
        model = new this.options.selectedCollection.model(event.added);
        this.options.selectedCollection.add(model);
      }
      if (event.removed) {
        itemToRemove = this.options.selectedCollection.findWhere({
          id: event.removed.id
        });
        if (!itemToRemove) {
          throw new Error('MultiSelectControlView : error : change event occurred but selectedCollection is not in sync');
        }
        return this.options.selectedCollection.remove(itemToRemove);
      }
    };

    return MultiSelectControlView;

  })(Backbone.View);

  testBackboneSelect2 = function() {
    var TestListView, datapoints, selectView, selectedDatapoints, selectionView, _ref2;
    Handlebars.registerHelper('dump', function(obj) {
      return JSON.stringify(obj).toString();
    });
    datapoints = new Backbone.Collection([
      {
        id: 1,
        name: 'Bill',
        age: 27
      }, {
        id: 2,
        name: 'Alice',
        age: 28
      }, {
        id: 3,
        name: 'John',
        age: 18
      }, {
        id: 4,
        name: 'Mary',
        age: 58
      }
    ]);
    selectedDatapoints = new Backbone.Collection([
      {
        id: 2,
        name: 'Alice',
        age: 28
      }
    ]);
    selectView = new MultiSelectControlView({
      el: $('#sample-select')[0],
      collection: datapoints,
      displayProperty: 'name',
      selectedCollection: selectedDatapoints,
      defaultItem: {
        age: 18
      },
      placeholder: 'Enter some names...'
    });
    TestListView = (function(_super) {
      __extends(TestListView, _super);

      function TestListView() {
        _ref2 = TestListView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      TestListView.prototype.tagName = 'li';

      TestListView.prototype.className = 'test-list-item';

      return TestListView;

    })(Guts.BasicModelView);
    return selectionView = new Guts.BaseCollectionView({
      el: $('#selection-section')[0],
      item_view_class: TestListView,
      collection: selectedDatapoints
    });
  };

}).call(this);
