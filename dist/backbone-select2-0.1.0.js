// backbone-select2-0.1.0
// http://github.com/wbbradley/backbone-select2
// Generated by CoffeeScript 1.6.3
(function() {
  var MultiSelectControlView, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MultiSelectControlView = (function(_super) {
    __extends(MultiSelectControlView, _super);

    function MultiSelectControlView() {
      this.onChange = __bind(this.onChange, this);
      this.initialize = __bind(this.initialize, this);
      this.formatter = __bind(this.formatter, this);
      _ref = MultiSelectControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MultiSelectControlView.prototype.formatter = function() {
      var displayProperty;
      if (typeof this.options.displayProperty === 'string') {
        displayProperty = this.options.displayProperty;
        return function(item) {
          return _.result(item, displayProperty);
        };
      } else {
        throw new Error('MultiSelectControlView : error : you must define the displayProperty in your model to show in the dropdown');
      }
    };

    MultiSelectControlView.prototype.initialize = function(options) {
      var _ref1, _ref2,
        _this = this;
      this.options = options;
      if (!((_ref1 = this.options) != null ? (_ref2 = _ref1.selectedCollection) != null ? _ref2.model : void 0 : void 0)) {
        throw new Error('MultiSelectControlView : error : you must provide a collection to store the selected objects');
      }
      this.$select = this.$el.select2({
        multiple: true,
        id: (function() {
          var id;
          id = _this.options.id;
          return function(item) {
            return _.result(item, id || 'id');
          };
        })(),
        data: {
          results: this.collection.toJSON(),
          text: this.options.displayProperty
        },
        formatResult: this.formatter(),
        formatSelection: this.formatter(),
        createSearchChoice: function(term) {
          var itemsWithTerm, search, searchChoice;
          search = {};
          search[_this.options.displayProperty] = term;
          itemsWithTerm = _this.collection.where(search);
          if ((itemsWithTerm != null ? itemsWithTerm.length : void 0) > 0) {
            return;
          }
          searchChoice = _.extend({}, _this.options.defaultItem, {
            id: _.uniqueId('n')
          });
          searchChoice[_this.options.displayProperty] = term;
          return searchChoice;
        },
        placeholder: this.options.placeholder
      });
      this.$select.select2('data', this.options.selectedCollection.toJSON());
      this.$select.change(this.onChange);
    };

    MultiSelectControlView.prototype.onChange = function(event) {
      var itemMatching, itemToRemove, model;
      if (event.added) {
        itemMatching = this.options.selectedCollection.findWhere({
          id: event.added.id
        });
        if (itemMatching) {
          throw new Error('MultiSelectControlView : error : attempt to add item to selectedCollection that already exists');
        }
        model = new this.options.selectedCollection.model(event.added);
        this.options.selectedCollection.add(model);
      }
      if (event.removed) {
        itemToRemove = this.options.selectedCollection.findWhere({
          id: event.removed.id
        });
        if (!itemToRemove) {
          throw new Error('MultiSelectControlView : error : change event occurred but selectedCollection is not in sync');
        }
        return this.options.selectedCollection.remove(itemToRemove);
      }
    };

    return MultiSelectControlView;

  })(Backbone.View);

  if (!Backbone) {
    throw new Error('backbone-select2 : error : Backbone should be loaded before me');
  }

  Backbone.Select2 = {};

  Backbone.Select2.MultiselectView = MultiSelectControlView;

}).call(this);
