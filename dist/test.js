// Generated by CoffeeScript 1.6.3
(function() {
  var BaseOptionView, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseOptionView = (function(_super) {
    __extends(BaseOptionView, _super);

    function BaseOptionView() {
      this.render = __bind(this.render, this);
      this.tagName = __bind(this.tagName, this);
      this.initialize = __bind(this.initialize, this);
      _ref = BaseOptionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BaseOptionView.prototype.initialize = function() {
      console.log('OptionView init');
      if (!this.propertyValue) {
        throw new Error('You must specify a propertyValue on a derived class from BaseOptionView');
      }
      if (!this.propertyDisplay) {
        throw new Error('You must specify a propertyName on a derived class from BaseOptionView');
      }
      return this.listenTo(this.model, 'change', this.render);
    };

    BaseOptionView.prototype.tagName = function() {
      return 'option';
    };

    BaseOptionView.prototype.render = function() {
      this.el.setAttribute('value', _.result(this, 'propertyValue'));
      this.el.innerText = _.result(this, 'propertyDisplay');
      return this;
    };

    return BaseOptionView;

  })(Backbone.View);

  this.testBackboneSelect2 = function() {
    var TestListView, datapoints, selectView, selectedDatapoints, selectionView, _ref1;
    Handlebars.registerHelper('dump', function(obj) {
      return JSON.stringify(obj).toString();
    });
    datapoints = new Backbone.Collection([
      {
        id: 1,
        name: 'Bill',
        age: 27
      }, {
        id: 2,
        name: 'Alice',
        age: 28
      }, {
        id: 3,
        name: 'John',
        age: 18
      }, {
        id: 4,
        name: 'Mary',
        age: 58
      }
    ]);
    selectedDatapoints = new Backbone.Collection([
      {
        id: 2,
        name: 'Alice',
        age: 28
      }
    ]);
    selectView = new Backbone.Select2.MultiselectView({
      el: $('#sample-select')[0],
      collection: datapoints,
      displayProperty: 'name',
      selectedCollection: selectedDatapoints,
      defaultItem: {
        age: 18
      },
      placeholder: 'Enter some names...'
    });
    TestListView = (function(_super) {
      __extends(TestListView, _super);

      function TestListView() {
        _ref1 = TestListView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TestListView.prototype.tagName = 'li';

      TestListView.prototype.className = 'test-list-item';

      return TestListView;

    })(Guts.BasicModelView);
    return selectionView = new Guts.BaseCollectionView({
      el: $('#selection-section')[0],
      item_view_class: TestListView,
      collection: selectedDatapoints
    });
  };

}).call(this);
